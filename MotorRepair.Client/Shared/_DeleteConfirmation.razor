<div class="modal fade" data-backdrop="static" data-keyboard="false" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog  modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" @onclick="() => ConfirmationClickedAsync(false)">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete?
            </div>
            <div class="modal-footer">
                @if (IsProcessing) {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled>
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Deleting...
                    </button>
                } else {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ConfirmationClickedAsync(false)">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmationClickedAsync(true)">
                        Delete
                    </button>
                }                
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnConfirmationChanged { get; set; }

    [Parameter]
    public bool IsProcessing { get; set; }

    private async Task ConfirmationClickedAsync(bool isConfirmed) {
        if (isConfirmed) {
            await OnConfirmationChanged.InvokeAsync(true);
        }
    }
}
